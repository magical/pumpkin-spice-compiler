// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

type yySymType struct {
	yys      int
	ident    string
	num      string
	args     []string
	expr     Expr
	exprlist []Expr
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57355
	yyEofCode = 57344
	yyErrCode = 57345
	kElse     = 57352
	kEnd      = 57354
	kFunc     = 57353
	kIf       = 57350
	kIn       = 57349
	kLet      = 57348
	kThen     = 57351
	tIdent    = 57346
	tNumber   = 57347

	yyMaxDepth = 200
	yyTabOfs   = -33
)

var (
	yyPrec = map[int]int{
		'<': 0,
		'+': 1,
		'-': 1,
		'*': 2,
		'/': 2,
		'(': 3,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (47x)
		41:    1,  // ')' (35x)
		42:    2,  // '*' (29x)
		43:    3,  // '+' (29x)
		45:    4,  // '-' (29x)
		47:    5,  // '/' (29x)
		60:    6,  // '<' (29x)
		44:    7,  // ',' (25x)
		57354: 8,  // kEnd (24x)
		57344: 9,  // $end (21x)
		57346: 10, // tIdent (21x)
		57365: 11, // ident (20x)
		57352: 12, // kElse (20x)
		57349: 13, // kIn (20x)
		57351: 14, // kThen (20x)
		57360: 15, // call (16x)
		57361: 16, // expr (16x)
		57364: 17, // func (16x)
		57366: 18, // if (16x)
		57353: 19, // kFunc (16x)
		57350: 20, // kIf (16x)
		57348: 21, // kLet (16x)
		57367: 22, // let (16x)
		57368: 23, // num (16x)
		57347: 24, // tNumber (16x)
		61:    25, // '=' (2x)
		57356: 26, // arglist0 (2x)
		57357: 27, // arglist1 (2x)
		57358: 28, // args (2x)
		57359: 29, // body (2x)
		57362: 30, // exprlist0 (1x)
		57363: 31, // exprlist1 (1x)
		57369: 32, // top (1x)
		57355: 33, // $default (0x)
		57345: 34, // error (0x)
	}

	yySymNames = []string{
		"'('",
		"')'",
		"'*'",
		"'+'",
		"'-'",
		"'/'",
		"'<'",
		"','",
		"kEnd",
		"$end",
		"tIdent",
		"ident",
		"kElse",
		"kIn",
		"kThen",
		"call",
		"expr",
		"func",
		"if",
		"kFunc",
		"kIf",
		"kLet",
		"let",
		"num",
		"tNumber",
		"'='",
		"arglist0",
		"arglist1",
		"args",
		"body",
		"exprlist0",
		"exprlist1",
		"top",
		"$default",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {32, 1},
		2:  {16, 1},
		3:  {16, 1},
		4:  {16, 3},
		5:  {16, 3},
		6:  {16, 3},
		7:  {16, 3},
		8:  {16, 3},
		9:  {16, 3},
		10: {16, 1},
		11: {22, 7},
		12: {16, 1},
		13: {18, 7},
		14: {16, 1},
		15: {17, 6},
		16: {17, 7},
		17: {28, 1},
		18: {29, 1},
		19: {26, 0},
		20: {26, 1},
		21: {26, 2},
		22: {27, 1},
		23: {27, 3},
		24: {16, 1},
		25: {15, 4},
		26: {30, 0},
		27: {30, 1},
		28: {30, 2},
		29: {31, 1},
		30: {31, 3},
		31: {11, 1},
		32: {23, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [63][]uint8{
		// 0
		{38, 10: 46, 36, 15: 45, 35, 43, 41, 44, 42, 40, 39, 37, 47, 32: 34},
		{9: 33},
		{66, 2: 64, 62, 63, 65, 61, 9: 32},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 12: 31, 31, 31},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 12: 30, 30, 30},
		// 5
		{38, 10: 46, 36, 15: 45, 94, 43, 41, 44, 42, 40, 39, 37, 47},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 12: 23, 23, 23},
		{10: 46, 88},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12: 21, 21, 21},
		{38, 10: 46, 36, 15: 45, 82, 43, 41, 44, 42, 40, 39, 37, 47},
		// 10
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 12: 19, 19, 19},
		{48, 10: 49},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12: 9, 9, 9},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 12: 2, 2, 2, 25: 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12: 1, 1, 1},
		// 15
		{1: 14, 10: 46, 54, 26: 52, 53, 78},
		{50},
		{1: 14, 10: 46, 54, 26: 52, 53, 51},
		{1: 57},
		{1: 16},
		// 20
		{1: 13, 7: 55},
		{1: 11, 7: 11},
		{1: 12, 10: 46, 56},
		{1: 10, 7: 10},
		{38, 10: 46, 36, 15: 45, 58, 43, 41, 44, 42, 40, 39, 37, 47, 29: 59},
		// 25
		{66, 2: 64, 62, 63, 65, 61, 8: 15},
		{8: 60},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 12: 17, 17, 17},
		{38, 10: 46, 36, 15: 45, 77, 43, 41, 44, 42, 40, 39, 37, 47},
		{38, 10: 46, 36, 15: 45, 76, 43, 41, 44, 42, 40, 39, 37, 47},
		// 30
		{38, 10: 46, 36, 15: 45, 75, 43, 41, 44, 42, 40, 39, 37, 47},
		{38, 10: 46, 36, 15: 45, 74, 43, 41, 44, 42, 40, 39, 37, 47},
		{38, 10: 46, 36, 15: 45, 73, 43, 41, 44, 42, 40, 39, 37, 47},
		{38, 7, 10: 46, 36, 15: 45, 67, 43, 41, 44, 42, 40, 39, 37, 47, 30: 68, 69},
		{66, 4, 64, 62, 63, 65, 61, 4},
		// 35
		{1: 72},
		{1: 6, 7: 70},
		{38, 5, 10: 46, 36, 15: 45, 71, 43, 41, 44, 42, 40, 39, 37, 47},
		{66, 3, 64, 62, 63, 65, 61, 3},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12: 8, 8, 8},
		// 40
		{66, 24, 24, 24, 24, 24, 24, 24, 24, 24, 12: 24, 24, 24},
		{66, 25, 25, 25, 25, 25, 25, 25, 25, 25, 12: 25, 25, 25},
		{66, 26, 64, 26, 26, 65, 26, 26, 26, 26, 12: 26, 26, 26},
		{66, 27, 64, 27, 27, 65, 27, 27, 27, 27, 12: 27, 27, 27},
		{66, 28, 64, 62, 63, 65, 28, 28, 28, 28, 12: 28, 28, 28},
		// 45
		{1: 79},
		{38, 10: 46, 36, 15: 45, 58, 43, 41, 44, 42, 40, 39, 37, 47, 29: 80},
		{8: 81},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12: 18, 18, 18},
		{66, 2: 64, 62, 63, 65, 61, 14: 83},
		// 50
		{38, 10: 46, 36, 15: 45, 84, 43, 41, 44, 42, 40, 39, 37, 47},
		{66, 2: 64, 62, 63, 65, 61, 12: 85},
		{38, 10: 46, 36, 15: 45, 86, 43, 41, 44, 42, 40, 39, 37, 47},
		{66, 2: 64, 62, 63, 65, 61, 8: 87},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 12: 20, 20, 20},
		// 55
		{25: 89},
		{38, 10: 46, 36, 15: 45, 90, 43, 41, 44, 42, 40, 39, 37, 47},
		{66, 2: 64, 62, 63, 65, 61, 13: 91},
		{38, 10: 46, 36, 15: 45, 92, 43, 41, 44, 42, 40, 39, 37, 47},
		{66, 2: 64, 62, 63, 65, 61, 8: 93},
		// 60
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 12: 22, 22, 22},
		{66, 95, 64, 62, 63, 65, 61},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 12: 29, 29, 29},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 34

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yylex.(*lexer).result = yyS[yypt-0].expr
		}
	case 2:
		{
			yyVAL.expr = &VarExpr{yyS[yypt-0].ident}
		}
	case 3:
		{
			yyVAL.expr = &IntExpr{yyS[yypt-0].num}
		}
	case 4:
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 5:
		{
			yyVAL.expr = &BinExpr{"<", yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 6:
		{
			yyVAL.expr = &BinExpr{"+", yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 7:
		{
			yyVAL.expr = &BinExpr{"-", yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 8:
		{
			yyVAL.expr = &BinExpr{"*", yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 9:
		{
			yyVAL.expr = &BinExpr{"/", yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 11:
		{
			yyVAL.expr = &LetExpr{Var: yyS[yypt-5].ident, Val: yyS[yypt-3].expr, Body: yyS[yypt-1].expr}
		}
	case 13:
		{
			yyVAL.expr = &IfExpr{yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr}
		}
	case 15:
		{
			yyVAL.expr = &FuncExpr{"", yyS[yypt-3].args, yyS[yypt-1].expr}
		}
	case 16:
		{
			yyVAL.expr = &FuncExpr{yyS[yypt-5].ident, yyS[yypt-3].args, yyS[yypt-1].expr}
		}
	case 19:
		{
			yyVAL.args = nil
		}
	case 22:
		{
			yyVAL.args = []string{yyS[yypt-0].ident}
		}
	case 23:
		{
			yyVAL.args = append(yyS[yypt-2].args, yyS[yypt-0].ident)
		}
	case 25:
		{
			yyVAL.expr = &CallExpr{Func: yyS[yypt-3].expr, Args: yyS[yypt-1].exprlist}
		}
	case 26:
		{
			yyVAL.exprlist = nil
		}
	case 29:
		{
			yyVAL.exprlist = []Expr{yyS[yypt-0].expr}
		}
	case 30:
		{
			yyVAL.exprlist = append(yyS[yypt-2].exprlist, yyS[yypt-0].expr)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
