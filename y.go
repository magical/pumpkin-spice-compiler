// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

type yySymType struct {
	yys      int
	ident    string
	num      string
	args     []string
	expr     Expr
	exprlist []Expr
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57355
	yyEofCode = 57344
	yyErrCode = 57345
	kElse     = 57352
	kEnd      = 57354
	kFunc     = 57353
	kIf       = 57350
	kIn       = 57349
	kLet      = 57348
	kThen     = 57351
	tIdent    = 57346
	tNumber   = 57347

	yyMaxDepth = 200
	yyTabOfs   = -35
)

var (
	yyPrec = map[int]int{
		'<': 0,
		'+': 1,
		'-': 1,
		'*': 2,
		'/': 2,
		'(': 3,
		'.': 4,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (50x)
		45:    1,  // '-' (48x)
		41:    2,  // ')' (37x)
		42:    3,  // '*' (31x)
		43:    4,  // '+' (31x)
		46:    5,  // '.' (31x)
		47:    6,  // '/' (31x)
		60:    7,  // '<' (31x)
		44:    8,  // ',' (27x)
		57354: 9,  // kEnd (26x)
		57344: 10, // $end (23x)
		57346: 11, // tIdent (23x)
		57365: 12, // ident (22x)
		57352: 13, // kElse (22x)
		57349: 14, // kIn (22x)
		57351: 15, // kThen (22x)
		57360: 16, // call (17x)
		57361: 17, // expr (17x)
		57364: 18, // func (17x)
		57366: 19, // if (17x)
		57353: 20, // kFunc (17x)
		57350: 21, // kIf (17x)
		57348: 22, // kLet (17x)
		57367: 23, // let (17x)
		57368: 24, // num (17x)
		57347: 25, // tNumber (17x)
		61:    26, // '=' (2x)
		57356: 27, // arglist0 (2x)
		57357: 28, // arglist1 (2x)
		57358: 29, // args (2x)
		57359: 30, // body (2x)
		57362: 31, // exprlist0 (1x)
		57363: 32, // exprlist1 (1x)
		57369: 33, // top (1x)
		57355: 34, // $default (0x)
		57345: 35, // error (0x)
	}

	yySymNames = []string{
		"'('",
		"'-'",
		"')'",
		"'*'",
		"'+'",
		"'.'",
		"'/'",
		"'<'",
		"','",
		"kEnd",
		"$end",
		"tIdent",
		"ident",
		"kElse",
		"kIn",
		"kThen",
		"call",
		"expr",
		"func",
		"if",
		"kFunc",
		"kIf",
		"kLet",
		"let",
		"num",
		"tNumber",
		"'='",
		"arglist0",
		"arglist1",
		"args",
		"body",
		"exprlist0",
		"exprlist1",
		"top",
		"$default",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {33, 1},
		2:  {17, 1},
		3:  {17, 1},
		4:  {17, 3},
		5:  {17, 3},
		6:  {17, 3},
		7:  {17, 3},
		8:  {17, 3},
		9:  {17, 3},
		10: {17, 3},
		11: {17, 2},
		12: {17, 1},
		13: {23, 7},
		14: {17, 1},
		15: {19, 7},
		16: {17, 1},
		17: {18, 6},
		18: {18, 7},
		19: {29, 1},
		20: {30, 1},
		21: {27, 0},
		22: {27, 1},
		23: {27, 2},
		24: {28, 1},
		25: {28, 3},
		26: {17, 1},
		27: {16, 4},
		28: {31, 0},
		29: {31, 1},
		30: {31, 2},
		31: {32, 1},
		32: {32, 3},
		33: {12, 1},
		34: {24, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [67][]uint8{
		// 0
		{40, 41, 11: 49, 38, 16: 48, 37, 46, 44, 47, 45, 43, 42, 39, 50, 33: 36},
		{10: 35},
		{70, 67, 3: 68, 66, 64, 69, 65, 10: 34},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 13: 33, 33, 33},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 13: 32, 32, 32},
		// 5
		{40, 41, 11: 49, 38, 16: 48, 100, 46, 44, 47, 45, 43, 42, 39, 50},
		{40, 41, 11: 49, 38, 16: 48, 99, 46, 44, 47, 45, 43, 42, 39, 50},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 13: 23, 23, 23},
		{11: 49, 93},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 13: 21, 21, 21},
		// 10
		{40, 41, 11: 49, 38, 16: 48, 87, 46, 44, 47, 45, 43, 42, 39, 50},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 13: 19, 19, 19},
		{51, 11: 52},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 13: 9, 9, 9},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 13: 2, 2, 2, 26: 2},
		// 15
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13: 1, 1, 1},
		{2: 14, 11: 49, 57, 27: 55, 56, 83},
		{53},
		{2: 14, 11: 49, 57, 27: 55, 56, 54},
		{2: 60},
		// 20
		{2: 16},
		{2: 13, 8: 58},
		{2: 11, 8: 11},
		{2: 12, 11: 49, 59},
		{2: 10, 8: 10},
		// 25
		{40, 41, 11: 49, 38, 16: 48, 61, 46, 44, 47, 45, 43, 42, 39, 50, 30: 62},
		{70, 67, 3: 68, 66, 64, 69, 65, 9: 15},
		{9: 63},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 13: 17, 17, 17},
		{11: 49, 82},
		// 30
		{40, 41, 11: 49, 38, 16: 48, 81, 46, 44, 47, 45, 43, 42, 39, 50},
		{40, 41, 11: 49, 38, 16: 48, 80, 46, 44, 47, 45, 43, 42, 39, 50},
		{40, 41, 11: 49, 38, 16: 48, 79, 46, 44, 47, 45, 43, 42, 39, 50},
		{40, 41, 11: 49, 38, 16: 48, 78, 46, 44, 47, 45, 43, 42, 39, 50},
		{40, 41, 11: 49, 38, 16: 48, 77, 46, 44, 47, 45, 43, 42, 39, 50},
		// 35
		{40, 41, 7, 11: 49, 38, 16: 48, 71, 46, 44, 47, 45, 43, 42, 39, 50, 31: 72, 73},
		{70, 67, 4, 68, 66, 64, 69, 65, 4},
		{2: 76},
		{2: 6, 8: 74},
		{40, 41, 5, 11: 49, 38, 16: 48, 75, 46, 44, 47, 45, 43, 42, 39, 50},
		// 40
		{70, 67, 3, 68, 66, 64, 69, 65, 3},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 13: 8, 8, 8},
		{70, 25, 25, 25, 25, 64, 25, 25, 25, 25, 25, 13: 25, 25, 25},
		{70, 26, 26, 26, 26, 64, 26, 26, 26, 26, 26, 13: 26, 26, 26},
		{70, 27, 27, 68, 27, 64, 69, 27, 27, 27, 27, 13: 27, 27, 27},
		// 45
		{70, 28, 28, 68, 28, 64, 69, 28, 28, 28, 28, 13: 28, 28, 28},
		{70, 67, 29, 68, 66, 64, 69, 29, 29, 29, 29, 13: 29, 29, 29},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 13: 30, 30, 30},
		{2: 84},
		{40, 41, 11: 49, 38, 16: 48, 61, 46, 44, 47, 45, 43, 42, 39, 50, 30: 85},
		// 50
		{9: 86},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 13: 18, 18, 18},
		{70, 67, 3: 68, 66, 64, 69, 65, 15: 88},
		{40, 41, 11: 49, 38, 16: 48, 89, 46, 44, 47, 45, 43, 42, 39, 50},
		{70, 67, 3: 68, 66, 64, 69, 65, 13: 90},
		// 55
		{40, 41, 11: 49, 38, 16: 48, 91, 46, 44, 47, 45, 43, 42, 39, 50},
		{70, 67, 3: 68, 66, 64, 69, 65, 9: 92},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 13: 20, 20, 20},
		{26: 94},
		{40, 41, 11: 49, 38, 16: 48, 95, 46, 44, 47, 45, 43, 42, 39, 50},
		// 60
		{70, 67, 3: 68, 66, 64, 69, 65, 14: 96},
		{40, 41, 11: 49, 38, 16: 48, 97, 46, 44, 47, 45, 43, 42, 39, 50},
		{70, 67, 3: 68, 66, 64, 69, 65, 9: 98},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 13: 22, 22, 22},
		{70, 24, 24, 68, 24, 64, 69, 24, 24, 24, 24, 13: 24, 24, 24},
		// 65
		{70, 67, 101, 68, 66, 64, 69, 65},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 13: 31, 31, 31},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 35

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yylex.(*lexer).result = yyS[yypt-0].expr
		}
	case 2:
		{
			yyVAL.expr = &VarExpr{yyS[yypt-0].ident}
		}
	case 3:
		{
			yyVAL.expr = &IntExpr{yyS[yypt-0].num}
		}
	case 4:
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 5:
		{
			yyVAL.expr = &DotExpr{".", yyS[yypt-2].expr, yyS[yypt-0].ident}
		}
	case 6:
		{
			yyVAL.expr = &BinExpr{"<", yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 7:
		{
			yyVAL.expr = &BinExpr{"+", yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 8:
		{
			yyVAL.expr = &BinExpr{"-", yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 9:
		{
			yyVAL.expr = &BinExpr{"*", yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 10:
		{
			yyVAL.expr = &BinExpr{"/", yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 11:
		{
			yyVAL.expr = &BinExpr{"-", &IntExpr{"0"}, yyS[yypt-0].expr}
		}
	case 13:
		{
			yyVAL.expr = &LetExpr{Var: yyS[yypt-5].ident, Val: yyS[yypt-3].expr, Body: yyS[yypt-1].expr}
		}
	case 15:
		{
			yyVAL.expr = &IfExpr{yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr}
		}
	case 17:
		{
			yyVAL.expr = &FuncExpr{"", yyS[yypt-3].args, yyS[yypt-1].expr}
		}
	case 18:
		{
			yyVAL.expr = &FuncExpr{yyS[yypt-5].ident, yyS[yypt-3].args, yyS[yypt-1].expr}
		}
	case 21:
		{
			yyVAL.args = nil
		}
	case 24:
		{
			yyVAL.args = []string{yyS[yypt-0].ident}
		}
	case 25:
		{
			yyVAL.args = append(yyS[yypt-2].args, yyS[yypt-0].ident)
		}
	case 27:
		{
			yyVAL.expr = &CallExpr{Func: yyS[yypt-3].expr, Args: yyS[yypt-1].exprlist}
		}
	case 28:
		{
			yyVAL.exprlist = nil
		}
	case 31:
		{
			yyVAL.exprlist = []Expr{yyS[yypt-0].expr}
		}
	case 32:
		{
			yyVAL.exprlist = append(yyS[yypt-2].exprlist, yyS[yypt-0].expr)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
